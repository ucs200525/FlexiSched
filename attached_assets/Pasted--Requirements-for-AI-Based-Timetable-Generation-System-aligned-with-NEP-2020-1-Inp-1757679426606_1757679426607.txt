### ‚úÖ Requirements for AI-Based Timetable Generation System (aligned with NEP 2020)

#### **1. Input Requirements**

* **Student Data**

  * Student IDs, program (B.Ed., M.Ed., FYUP, ITEP, etc.)
  * Chosen electives (Major, Minor, Skill-based, Ability Enhancement, Value-added courses)
  * Credit load per semester

* **Curriculum Data**

  * Course codes, course titles, and type (theory/practical/project/fieldwork)
  * Credit distribution (lecture, tutorial, practical hours per week)
  * Semester mapping of courses

* **Faculty Data**

  * Faculty ID, name, and department
  * Courses they can teach (expertise mapping)
  * Availability (days and hours)
  * Workload constraints (max hours per week as per norms)

* **Infrastructure Data**

  * Classroom and lab availability
  * Seating/lab capacity
  * Room type (lecture hall, computer lab, science lab, seminar hall, etc.)

* **Special Requirements**

  * Teaching practice schedules for B.Ed. and M.Ed. students
  * Field work, internships, and project-based slots
  * Institutional constraints (holidays, common hours, departmental events)

---

#### **2. Functional Requirements**

* Automated conflict detection and resolution (faculty clash, room clash, student clash)
* AI/ML-based optimization for:

  * Balanced faculty workload
  * Even course distribution across week
  * Efficient use of rooms and labs
* Dynamic timetable editing (manual overrides by admin)
* Scenario simulation (try ‚Äúwhat-if‚Äù scheduling cases before finalizing)
* Scalability (support multiple programs, large student batches, future courses)
* Integration with Academic Management Systems (AMS/LMS)
* Secure role-based access (Admin, Faculty, Student)
* Export timetables in PDF, Excel, and web-view formats

---

#### **3. Non-Functional Requirements**

* **Performance**: Generate timetable within minutes for large datasets
* **Usability**: Simple admin interface with drag-and-drop/manual edit features
* **Reliability**: Ensure no missed classes, clashes, or underutilization
* **Scalability**: Handle multiple colleges/programs simultaneously
* **Maintainability**: Easy updates for curriculum changes or new NEP rules
* **Security**: Protect student/faculty data, role-based access control

---

### üéØ Expected Output

1. **Semester-Wise Timetables**

   * Student-wise timetable (personalized view based on electives & credits)
   * Faculty-wise timetable (showing assigned classes, hours, and free slots)
   * Program-wise timetable (for B.Ed., M.Ed., FYUP, ITEP, etc.)
   * Room/lab allocation schedule

2. **Reports and Exports**

   * Conflict-free timetable in **PDF/Excel** formats
   * Summary reports:

     * Faculty workload report (hours assigned vs available)
     * Classroom/lab utilization report
     * Course coverage status

3. **System Features in Output**

   * Interactive web dashboard (search by student, course, faculty, room)
   * Dynamic editing (drag-and-drop class rescheduling)
   * Simulation results (compare different timetable versions)

---

and  . Internal AI Functionality

The AI engine will:

Match courses to faculty

Allocate courses only to eligible faculty based on specialization and expertise.

Ensure workload balance (no faculty overload, equal distribution).

Allocate rooms/labs dynamically

Assign only available rooms with sufficient capacity.

Ensure no double-booking of rooms.

Generate student timetable automatically

Based on chosen electives, the AI will allocate classes from available faculty and rooms.

Avoid clashes between core, electives, skill-based, and value-added courses.

Conflict Detection & Resolution

Faculty clash check (no two classes for one faculty at same time).

Student clash check (no overlapping electives).

Room clash check (one room cannot host multiple classes at same time).


and reomve open ai 